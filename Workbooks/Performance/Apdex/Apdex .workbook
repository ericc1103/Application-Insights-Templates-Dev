{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 1,
      "content": {
        "json": "# Apdex\n\n[Apdex (Application Performance Index)](http://apdex.org/overview.html) is an open standard method for measuring application performance. It contextualizes your application's performance in terms of the quality of experience you provide to your users.\n\nApdex classifies performance into three zones based on a baseline performance threshold T you define for your app:\n\n| Zone | Minimum Response Time | Maximum Response Time |\n| --- |: --- |: --- |: --- |\n| Satisfied | 0 seconds | T seconds |\n| Tolerating | T seconds | 4T seconds |\n| Frustrated | 4T seconds | - |\n"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "## Apdex Parameters"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "id": "f3e68c23-278e-4175-815d-dc7961bf34a0",
            "version": "KqlParameterItem/1.0",
            "name": "Type",
            "type": 2,
            "description": null,
            "isRequired": true,
            "multiSelect": null,
            "query": "datatable( column1:string, column2:string ) \r\n[ \r\n\"union pageViews, requests, dependencies\", \"Page Views, Requests and Dependencies\", \r\n\"pageViews\", \"Page Views\", \r\n\"requests\", \"Requests\", \r\n\"dependencies\", \"Dependencies\", \r\n] ",
            "value": "pageViews"
          },
          {
            "id": "07a9044c-0e5d-40f2-b815-b002fdcf5220",
            "version": "KqlParameterItem/1.0",
            "name": "Operations",
            "type": 2,
            "description": "Comma seperated list of items to include in Apdex calculations. example: 'RequestA', 'RequestB', 'PageViewC'. Use '*' to include all",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "{Type}\n| where timestamp >= ago(7d)\n| summarize count() by name\n| order by count_ desc\n| project Id=name, Title=name, Selected=false\n| union (\ndatatable(Id:string, Title:string, Selected:boolean)[\n'*', 'All Operations', true\n]\n)"
          },
          {
            "id": "9e8aba54-518d-443e-9eaf-4c8e87d513be",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 2,
            "isRequired": true,
            "multiSelect": null,
            "query": "datatable(key:string, display:string) \r\n[ \r\n\">= ago(1d)\", \"Last 24 hours\", \r\n\">= ago(2d)\", \"Last 48 hours\", \r\n\">= ago(7d)\", \"Last 7 days\", \r\n\">= ago(14d)\", \"Last 14 days\", \r\n\">= ago(30d)\", \"Last 30 days\", \r\n\">= ago(90d)\", \"Last 90 days\", \r\n\"between(ago(14d)..ago(7d))\", \"Previous Week\", \r\n\"between(ago(60d)..ago(30d))\", \"Previous Month\", \r\n] ",
            "value": ">= ago(14d)"
          },
          {
            "id": "822d691d-da84-46c8-84de-e2b091fb8387",
            "version": "KqlParameterItem/1.0",
            "name": "ApdexThresholdInMilliseconds",
            "type": 1,
            "description": null,
            "isRequired": false,
            "query": "{Type}\n| where timestamp {TimeRange}\n| where name in ({Operations}) or '*' in ({Operations})\n| summarize SumOfDuration =  sum(duration), CountOfDuration = count()\n| project AverageDuration = round(iff(CountOfDuration == 0, 0.0, 1.0 * SumOfDuration / CountOfDuration))\n"
          },
          {
            "id": "17ac059b-c7b6-498c-81b8-23c3213f38ee",
            "version": "KqlParameterItem/1.0",
            "name": "Calculations",
            "type": 2,
            "description": null,
            "isRequired": true,
            "multiSelect": null,
            "query": "datatable(x: string, y: string) [\r\n'ConsiderFailures', 'Consider failures as frustrating', \r\n'DoNotConsiderFailures', 'Do not consider failures as frustrating'\r\n]",
            "value": "ConsiderFailures"
          }
        ]
      }
    },
    {
      "type": 1,
      "content": {
        "json": "`ApdexThresholdInMilliseconds` defaults to the average duration for the selected operations. Set this to a threshold that makes sense for your app.\n\n## Drill-in parameters"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "id": "2f57173e-c1de-4b51-90a6-fc4baee9fec6",
            "version": "KqlParameterItem/1.0",
            "name": "SegmentBy",
            "type": 2,
            "description": null,
            "isRequired": true,
            "multiSelect": null,
            "query": "datatable(value:string, text:string)[\r\n'name', '‚ö™ Name',\r\n'cloud_RoleInstance', 'üñ•Ô∏è Machine',\r\n'client_CountryOrRegion', 'üìç Country or Region',\r\n'client_StateOrProvince', 'üìç State or Province',\r\n'application_Version', '‚ö™ Application Version',\r\n'operation_Name', '‚ö™ Operation',\r\n]\r\n| union ({Type}\r\n| where timestamp {TimeRange}\r\n| where name in ({Operations}) or '*' in ({Operations})\r\n| project customDimensions \r\n| summarize schema = buildschema(customDimensions) \r\n| mvexpand schema\r\n| extend e = extract(@'{\"(.+)\":.+}', 1, tostring(schema))\r\n| project text = strcat('‚ùÑÔ∏è ', e), value = strcat('customDimensions[\"', e, '\"]'))",
            "value": "name"
          },
          {
            "id": "6d8ec5b4-d1a7-45a0-9703-870eea3fad3d",
            "version": "KqlParameterItem/1.0",
            "name": "ShowSegmentsBy",
            "type": 2,
            "description": null,
            "isRequired": true,
            "multiSelect": null,
            "query": "datatable(value:string, text:string)[\r\n'Relevance desc', 'Most Relevant',\r\n'[\"Apdex Score\"] desc', 'Highest Apdex',\r\n'[\"Apdex Score\"] asc', 'Lowest Apdex',\r\n'Users desc', 'Most Users',\r\n]",
            "value": "Relevance desc"
          },
          {
            "id": "dd476d22-f17b-4ad9-ad00-e5d0cf73fe25",
            "version": "KqlParameterItem/1.0",
            "name": "SegmentFilters",
            "type": 2,
            "description": null,
            "isRequired": false,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "{Type}\r\n| where timestamp {TimeRange}\r\n| where name in ({Operations}) or '*' in ({Operations})\r\n| extend {SegmentBy} = iff(isempty({SegmentBy})== true, 'Unknown', {SegmentBy})\r\n| summarize by Value={SegmentBy}, Name = {SegmentBy}\r\n| extend isDefault = false\r\n| order by Name asc\r\n| union (datatable(Value:string, Name:string, isDefault:boolean)[ '*', 'Include All', true])\r\n"
          }
        ]
      }
    },
    {
      "type": 1,
      "content": {
        "json": "# Apdex Summary\nSee the overall Apdex score of your operations segmented by dimension you selected above. This will help you identify anomalies in your app performance that affect your end users."
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let apdexThreshhold = toint('{ApdexThresholdInMilliseconds}');\nlet apdexData = {Type}\n| where timestamp {TimeRange}\n| where name in ({Operations}) or '*' in ({Operations})\n| extend success = columnifexists('success', true)\n| extend Failure = iff('{Calculations}' == 'ConsiderFailures' and success == false, 1, 0)\n| extend InterestingDimension = iff(isempty({SegmentBy})== true, 'Unknown', {SegmentBy})\n| where InterestingDimension in ({SegmentFilters}) or '*' in ({SegmentFilters})\n| summarize AverageDuration = avg(duration), Failures = sum(Failure) by user_Id, InterestingDimension\n| extend UserExperience = case(AverageDuration <= apdexThreshhold, 'Satisfied', AverageDuration <= 4 * apdexThreshhold, 'Tolerating', 'Frustrated')\n| extend UserExperience = case(Failures > 0, \"Frustrated\", UserExperience)\n| summarize Satisfied = countif(UserExperience == 'Satisfied'), Tolerating = countif(UserExperience == 'Tolerating'), Frustrated = countif(UserExperience == 'Frustrated'), Total = count() by InterestingDimension\n| project InterestingDimension, [\"Satisfied Users\"] = Satisfied, [\"Tolerating Users\"] = Tolerating, [\"Frustrated Users\"] = Frustrated, [\"Apdex Score\"] = round((Satisfied + (Tolerating / 2.0)) / Total, 2), Total\n| extend Relevance = iff([\"Apdex Score\"] == 0, pow(Total, 1.6), Total / [\"Apdex Score\"])\n| project-rename Users = Total\n| order by {ShowSegmentsBy}\n| project-away Users, Relevance;\nlet max = toscalar(apdexData\n| summarize S = max([\"Satisfied Users\"]), T = max([\"Tolerating Users\"]), F = max([\"Frustrated Users\"] )\n| project max = iff(S > T, iff(S > F, S, F), iff(T > F, T, F)));\nlet GetEmojiBars = (T:(InterestingDimension:string, Users:long), MaxUsers:long, emoji:string) {\n    T    \n    | extend charArray = range(1, tolong(round(1.0 * 10 * Users / MaxUsers)), 1)\n    | extend c = emoji\n    | mvexpand charArray\n    | summarize EmojiBar = tostring(makelist(c)) by InterestingDimension, Users\n    | extend EmojiBar = replace('\"', '', EmojiBar)\n    | extend EmojiBar = replace(',', '', EmojiBar)\n    | extend EmojiBar = replace(@'\\[', '', EmojiBar)\n    | extend EmojiBar = replace(@'\\]', '', EmojiBar)\n    | project InterestingDimension, EmojiBar\n};\napdexData\n| join kind = inner (GetEmojiBars((apdexData | project InterestingDimension, Users = [\"Satisfied Users\"]), max, \"üíö\")) on InterestingDimension \n    | project-rename  [\"Satisfied\"] = EmojiBar \n    | project-away InterestingDimension1\n| join kind = inner (GetEmojiBars((apdexData | project InterestingDimension, Users = [\"Tolerating Users\"]), max, \"üíõ\")) on InterestingDimension \n    | project-rename  [\"Tolerating\"] = EmojiBar \n    | project-away InterestingDimension1\n| join kind = inner (GetEmojiBars((apdexData | project InterestingDimension, Users = [\"Frustrated Users\"]), max, \"‚ù§Ô∏è\")) on InterestingDimension \n    | project-rename  [\"Frustrated\"] = EmojiBar \n    | project-away InterestingDimension1\n| extend [\"Apdex Interpretation\"] = case([\"Apdex Score\"] <= 0.5, '‚õî Unacceptable', [\"Apdex Score\"] <= 0.7, '‚ö†Ô∏è Poor', [\"Apdex Score\"] <= 0.85, '‚ö†Ô∏è Fair', [\"Apdex Score\"] <= 0.94, '‚úîÔ∏è Good', '‚úîÔ∏è Excellent')\n| project Values = InterestingDimension, [\"Apdex Score\"], [\"Apdex Interpretation\"], [\"Satisfied Users\"], Satisfied, [\"Tolerating Users\"], Tolerating, [\"Frustrated Users\"], Frustrated\n",
        "showQuery": false,
        "size": 0,
        "aggregation": 0,
        "showAnnotations": false,
        "visualization": "table"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "# Daily Apdex Score\nSee how your Apdex Score changes over time."
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let apdexThreshhold = toint('{ApdexThresholdInMilliseconds}');\nlet failureThreshhold = 1;\nlet apdexData = {Type}\n| where timestamp {TimeRange}\n| where name in ({Operations}) or '*' in ({Operations})\n| extend success = columnifexists('success', true)\n| extend Failure = iff('{Calculations}' == 'ConsiderFailures' and success == false, 1, 0)\n| extend InterestingDimension = iff(isempty({SegmentBy})== true, 'Unknown', {SegmentBy})\n| where InterestingDimension in ({SegmentFilters}) or '*' in ({SegmentFilters})\n| summarize AverageDuration = avg(duration), Failures = sum(Failure) by user_Id, bin(timestamp, 1d), InterestingDimension\n| extend UserExperience = case(AverageDuration <= apdexThreshhold, 'Satisfied', AverageDuration <= 4 * apdexThreshhold, 'Tolerating', 'Frustrated')\n| extend UserExperience = case(Failures >= failureThreshhold, \"Frustrated\", UserExperience)\n| summarize Satisfied = countif(UserExperience == 'Satisfied'), Tolerating = countif(UserExperience == 'Tolerating'), Total = count() by timestamp, InterestingDimension\n| project timestamp, ApdexScore = (Satisfied + (Tolerating / 2.0)) / Total, Users = Total, InterestingDimension;\nlet pageRelevance = apdexData\n| summarize [\"Apdex Score\"] = avg(ApdexScore), Users=sum(Users) by InterestingDimension\n| extend Relevance = iff([\"Apdex Score\"] == 0, 1.0 * Users * Users, Users / [\"Apdex Score\"])\n| order by {ShowSegmentsBy}\n| project InterestingDimension\n| take 7;\napdexData\n| join kind = leftouter (pageRelevance) on InterestingDimension\n| extend InterestingDimension = iff(isempty(InterestingDimension1) == true, 'Other', InterestingDimension)\n| project timestamp, ApdexScore, Users, InterestingDimension \n| summarize ApdexScore = avg(ApdexScore) by timestamp, InterestingDimension\n| extend ApdexScore = round(ApdexScore, 3)",
        "showQuery": false,
        "size": 0,
        "aggregation": 5,
        "showAnnotations": false,
        "visualization": "timechart"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "# Daily Quality Experience\nSee your how the performance experience of your users have changed over time."
      }
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let apdexThreshhold = toint('{ApdexThresholdInMilliseconds}');\nlet failureThreshhold = 1;\n{Type}\n| where timestamp {TimeRange}\n| where name in ({Operations}) or '*' in ({Operations})\n| extend success = columnifexists('success', true)\n| extend Failure = iff('{Calculations}' == 'ConsiderFailures' and success == false, 1, 0)\n| extend InterestingDimension = iff(isempty({SegmentBy})== true, 'Unknown', {SegmentBy})\n| where InterestingDimension in ({SegmentFilters}) or '*' in ({SegmentFilters})\n| summarize AverageDuration = avg(duration), Failures = sum(Failure) by user_Id, bin(timestamp, 1d)\n| extend UserExperience = case(AverageDuration <= apdexThreshhold, 'Satisfied', AverageDuration <= 4 * apdexThreshhold, 'Tolerating', 'Frustrated')\n| extend UserExperience = case(Failures >= failureThreshhold, \"Frustrated\", UserExperience)\n| summarize count() by UserExperience, timestamp",
        "showQuery": false,
        "size": 0,
        "aggregation": 5,
        "showAnnotations": false,
        "visualization": "barchart"
      }
    }
  ]
}
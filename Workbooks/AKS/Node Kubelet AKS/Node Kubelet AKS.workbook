{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "id": "6548df2b-011e-4652-8f50-a53d9a07cd02",
            "version": "KqlParameterItem/1.0",
            "name": "timeRange",
            "label": "Time Range",
            "type": 4,
            "description": "Filter data by time range",
            "isRequired": true,
            "value": {
              "durationMs": 86400000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContextFromParameter": "TimeRange"
          },
          {
            "id": "5df096b7-eef5-4efb-ae33-de4f1d14daeb",
            "version": "KqlParameterItem/1.0",
            "name": "bin",
            "label": "Chart Granularity",
            "type": 2,
            "description": "Bin data points by some time interval (min)",
            "isRequired": true,
            "query": "let durationMs = datetime_diff('millisecond',{timeRange:end},{timeRange:start});\r\nlet idealNumberofDataPoints = 100;\r\nlet GranularityOptions = datatable(\r\nGranularityOptionsValue: long, \r\nGranularityOptionsLabel: string\r\n) [\r\n    5, '5 minutes', \r\n    15, '15 minutes', \r\n    30, '30 minutes', \r\n    60, '1 hour', \r\n    360, '6 hours', \r\n    720, '12 hours', \r\n    1440, '24 hours'\r\n];\r\nlet GranularityOptionsExtended = \r\nGranularityOptions\r\n| extend DataPointCount = (durationMs/(1000*60))/GranularityOptionsValue\r\n| extend Distance = abs(idealNumberofDataPoints - DataPointCount);\r\nlet idealGranularityOptionsValue = toscalar(\r\n    GranularityOptionsExtended\r\n    | summarize arg_min(Distance, *)\r\n    | project GranularityOptionsValue\r\n);\r\nGranularityOptionsExtended\r\n| project value = GranularityOptionsValue, label = GranularityOptionsLabel, selected = (GranularityOptionsValue == idealGranularityOptionsValue)\r\n\r\n\r\n\r\n",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "timeContext": {
              "durationMs": 0
            },
            "timeContextFromParameter": "timeRange",
            "queryType": 0,
            "resourceType": "microsoft.containerservice/managedclusters"
          },
          {
            "id": "634f054b-c813-467d-af61-2e00eeadf88d",
            "version": "KqlParameterItem/1.0",
            "name": "selectedNodes1",
            "label": "Node",
            "type": 2,
            "description": "Filter by Node",
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "InsightsMetrics\r\n| where Origin =~ 'container.azm.ms/telegraf'\r\n| where Namespace =~ 'container.azm.ms/prometheus'\r\n| extend Tags = todynamic(Tags)\r\n| project HostName = tostring(Tags.hostName)\r\n| distinct HostName\r\n| sort by HostName asc\r\n\r\n",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ]
            },
            "queryType": 0,
            "resourceType": "microsoft.containerservice/managedclusters"
          },
          {
            "id": "3dd04449-6ef7-45a9-bfb6-8e994907efcb",
            "version": "KqlParameterItem/1.0",
            "name": "selectedOperationTypes1",
            "label": "Operation Type",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "InsightsMetrics\r\n| where Origin =~ 'container.azm.ms/telegraf'\r\n| where Namespace =~ 'container.azm.ms/prometheus'\r\n| extend Tags = todynamic(Tags)\r\n| extend OperationType = tostring(Tags['operation_type'])\r\n| distinct OperationType\r\n| order by OperationType asc\r\n\r\n\r\n",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "selectAllValue": "*"
            },
            "queryType": 0,
            "resourceType": "microsoft.containerservice/managedclusters"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.containerservice/managedclusters"
      },
      "name": "parameters - 2"
    },
    {
      "type": 1,
      "content": {
        "json": "<h3>Overview By Node</h3>"
      },
      "customWidth": "50",
      "name": "text - 7"
    },
    {
      "type": 1,
      "content": {
        "json": "<h3>Overview By Operation Type</h3>"
      },
      "customWidth": "50",
      "name": "text - 7 - Copy"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let data = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/prometheus'\r\n| where Name == 'kubelet_docker_operations' or Name == 'kubelet_docker_operations_errors'\r\n| extend Tags = todynamic(Tags)\r\n| extend OperationType = tostring(Tags['operation_type']), HostName = tostring(Tags.hostName)\r\n| where '*' in ({selectedNodes1}) or HostName in ({selectedNodes1})\r\n| where '*' in ({selectedOperationTypes1}) or OperationType in ({selectedOperationTypes1})\r\n| extend partitionKey = strcat(HostName, '/' , Name, '/', OperationType)\r\n| partition by partitionKey (\r\n    order by TimeGenerated asc\r\n    | extend PrevVal = prev(Val, 1), PrevTimeGenerated = prev(TimeGenerated, 1)\r\n    | extend Rate = iif(TimeGenerated == PrevTimeGenerated, 0.0, Val - PrevVal)\r\n    | where isnull(Rate) == false\r\n)\r\n| project TimeGenerated, Name, HostName, Rate;\r\nlet operationData = data\r\n| where Name == 'kubelet_docker_operations';\r\nlet totalOperationsByNode = operationData\r\n| summarize Rate = sum(Rate) by HostName\r\n| project HostName, TotalOperations = Rate;\r\nlet totalOperationsByNodeSeries = operationData\r\n| make-series TotalOperationsSeries = sum(Rate) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {bin}m by HostName\r\n| project-away TimeGenerated;\r\nlet errorData = data\r\n| where Name == 'kubelet_docker_operations_errors';\r\nlet totalErrorsByNode = errorData\r\n| summarize Rate = sum(Rate) by HostName\r\n| project HostName, TotalErrors = Rate;\r\nlet totalErrorsByNodeSeries = errorData\r\n| make-series TotalErrorsSeries = sum(Rate) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {bin}m by HostName\r\n| project-away TimeGenerated;\r\ntotalOperationsByNode\r\n| join kind=inner ( totalErrorsByNode ) on HostName\r\n| join kind = inner ( totalOperationsByNodeSeries ) on HostName\r\n| join kind = inner ( totalErrorsByNodeSeries ) on HostName\r\n| project-away HostName1, HostName2, HostName3\r\n| extend TotalSuccessfulOperationsSeries = series_subtract(TotalOperationsSeries, TotalErrorsSeries)\r\n| extend SuccessPercentage = round(iif(TotalOperations == 0, 1.0, 1 - (TotalErrors / TotalOperations)), 4), SuccessPercentageSeries = series_divide(TotalSuccessfulOperationsSeries, TotalOperationsSeries)\r\n| extend SeriesOfEqualLength = range(1, array_length(TotalOperationsSeries), 1)\r\n| extend SeriesOfOne = series_divide(SeriesOfEqualLength, SeriesOfEqualLength)\r\n| extend SuccessfulOperationsEqualsTotalOperationsSeries = series_equals(TotalSuccessfulOperationsSeries, TotalOperationsSeries)\r\n| extend SuccessPercentageSeries = array_iff(SuccessfulOperationsEqualsTotalOperationsSeries, SeriesOfOne, SuccessPercentageSeries)\r\n| project HostName, TotalOperations, TotalErrors, SuccessPercentage, SuccessPercentageSeries\r\n| order by SuccessPercentage asc, HostName asc\r\n| project-rename Node = HostName, ['Total Operations'] = TotalOperations, ['Total Errors'] = TotalErrors, ['Success %'] = SuccessPercentage, ['Success % Trend'] = SuccessPercentageSeries",
        "size": 0,
        "showAnalytics": true,
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "timeRange",
        "queryType": 0,
        "resourceType": "microsoft.containerservice/managedclusters",
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Node",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Total Operations",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Total Errors",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Success %",
              "formatter": 8,
              "formatOptions": {
                "min": 0,
                "max": 1,
                "palette": "redGreen",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "percent",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "Success % Trend",
              "formatter": 9,
              "formatOptions": {
                "min": 0,
                "max": 1,
                "palette": "redGreen",
                "showIcon": true
              }
            }
          ],
          "filter": true
        }
      },
      "customWidth": "50",
      "showPin": true,
      "name": "query - 5"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let data = InsightsMetrics\r\n| where Origin == 'container.azm.ms/telegraf'\r\n| where Namespace == 'container.azm.ms/prometheus'\r\n| where Name == 'kubelet_docker_operations' or Name == 'kubelet_docker_operations_errors'\r\n| extend Tags = todynamic(Tags)\r\n| extend OperationType = tostring(Tags['operation_type']), HostName = tostring(Tags.hostName)\r\n| where '*' in ({selectedNodes1}) or HostName in ({selectedNodes1})\r\n| where '*' in ({selectedOperationTypes1}) or OperationType in ({selectedOperationTypes1})\r\n| extend partitionKey = strcat(HostName, '/' , Name, '/', OperationType)\r\n| partition by partitionKey (\r\n    order by TimeGenerated asc\r\n    | extend PrevVal = prev(Val, 1), PrevTimeGenerated = prev(TimeGenerated, 1)\r\n    | extend Rate = iif(TimeGenerated == PrevTimeGenerated, 0.0, Val - PrevVal)\r\n    | where isnull(Rate) == false\r\n)\r\n| project TimeGenerated, Name, OperationType, Rate;\r\nlet operationData = data\r\n| where Name == 'kubelet_docker_operations';\r\nlet totalOperationsByType = operationData\r\n| summarize Rate = sum(Rate) by OperationType\r\n| project OperationType, TotalOperations = Rate;\r\nlet totalOperationsByTypeSeries = operationData\r\n| make-series TotalOperationsByTypeSeries = sum(Rate) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {bin}m by OperationType\r\n| project-away TimeGenerated;\r\nlet errorsData = data\r\n| where Name == 'kubelet_docker_operations_errors';\r\nlet totalErrorsByType = errorsData\r\n| summarize Rate = sum(Rate) by OperationType\r\n| project OperationType, TotalErrors = Rate;\r\nlet totalErrorsByTypeSeries = errorsData\r\n| make-series TotalErrorsByTypeSeries = sum(Rate) default = 0 on TimeGenerated from {timeRange:start} to {timeRange:end} step {bin}m by OperationType\r\n| project-away TimeGenerated;\r\ntotalOperationsByType\r\n| join kind=inner ( totalErrorsByType ) on OperationType\r\n| join kind=inner ( totalErrorsByTypeSeries ) on OperationType\r\n| join kind=inner ( totalOperationsByTypeSeries ) on OperationType\r\n| project-away OperationType1, OperationType2, OperationType3\r\n| extend TotalSuccessfulOperationsByTypeSeries = series_subtract(TotalOperationsByTypeSeries, TotalErrorsByTypeSeries)\r\n| extend SuccessPercentage = round(iif(TotalOperations == 0, 1.0, 1 - (TotalErrors / TotalOperations)), 4), SuccessPercentageSeries = series_divide(TotalSuccessfulOperationsByTypeSeries, TotalOperationsByTypeSeries)\r\n| extend SeriesOfEqualLength = range(1, array_length(TotalOperationsByTypeSeries), 1)\r\n| extend SeriesOfOne = series_divide(SeriesOfEqualLength, SeriesOfEqualLength)\r\n| extend SuccessfulOperationsEqualsTotalOperationsSeries = series_equals(TotalSuccessfulOperationsByTypeSeries, TotalOperationsByTypeSeries)\r\n| extend SuccessPercentageSeries = array_iff(SuccessfulOperationsEqualsTotalOperationsSeries, SeriesOfOne, SuccessPercentageSeries)\r\n| project OperationType, TotalOperations, TotalErrors, SuccessPercentage, SuccessPercentageSeries\r\n| order by SuccessPercentage asc, OperationType asc\r\n| project-rename ['Operation Type'] = OperationType, ['Total Errors'] = TotalErrors, ['Success %'] = SuccessPercentage, ['Success % Trend'] = SuccessPercentageSeries\r\n",
        "size": 0,
        "showAnalytics": true,
        "timeContext": {
          "durationMs": 0
        },
        "timeContextFromParameter": "timeRange",
        "queryType": 0,
        "resourceType": "microsoft.containerservice/managedclusters",
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Operation Type",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "TotalOperations",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Total Errors",
              "formatter": 0,
              "formatOptions": {
                "showIcon": true
              }
            },
            {
              "columnMatch": "Success %",
              "formatter": 8,
              "formatOptions": {
                "min": 0,
                "max": 1,
                "palette": "redGreen",
                "showIcon": true
              },
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "percent",
                  "maximumFractionDigits": 2
                }
              }
            },
            {
              "columnMatch": "Success % Trend",
              "formatter": 9,
              "formatOptions": {
                "min": 0,
                "max": 1,
                "palette": "redGreen",
                "showIcon": true
              }
            }
          ],
          "filter": true
        }
      },
      "customWidth": "50",
      "showPin": true,
      "name": "query - 6 - Copy"
    }
  ],
  "fallbackResourceIds": [],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}
{
  "version": "Notebook/1.0",
  "isLocked": true,
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "id": "e41c2177-932a-4c58-ba24-03ef070eb197",
            "version": "KqlParameterItem/1.0",
            "name": "Workspace",
            "type": 5,
            "isRequired": true,
            "value": "value::1",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.operationalinsights/workspaces": true
              },
              "additionalResourceOptions": [
                "value::1"
              ]
            },
            "timeContextFromParameter": null
          },
          {
            "id": "67b8a28c-f7f9-4903-883d-4a308a6ffe71",
            "version": "KqlParameterItem/1.0",
            "name": "Computer",
            "type": 5,
            "isRequired": true,
            "value": "value::1",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.compute/virtualmachines": true
              },
              "additionalResourceOptions": [
                "value::1"
              ]
            },
            "timeContextFromParameter": null
          },
          {
            "id": "68692e38-3c2c-4fd2-8e03-2357f2275142",
            "version": "KqlParameterItem/1.0",
            "name": "ComputerName",
            "type": 1,
            "isRequired": true,
            "query": "print '{Computer:label}'",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "resourceType": "microsoft.compute/virtualmachines"
      },
      "conditionalVisibility": {
        "parameterName": "_",
        "comparison": "isNotEqualTo",
        "value": null
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Workspace}"
        ],
        "parameters": [
          {
            "id": "2debcfba-e410-4300-9886-78069cef42e0",
            "version": "KqlParameterItem/1.0",
            "name": "_A_ComputerName",
            "type": 1,
            "isRequired": false,
            "query": "print(iff(\"{ComputerName}\" == \"undefined\", \"\", \"<h2 style='color:#777;font-weight:normal;margin-top:0;padding-top:0;font-size:1rem;'>{ComputerName}</h2>\"));",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "648ac90d-4be5-4c08-ac13-bcff7f8ddbf9",
            "version": "KqlParameterItem/1.0",
            "name": "_A_HeaderTextPrefix",
            "type": 1,
            "isRequired": false,
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "value": "This workbook requires [Azure Monitor for VMs (preview)](https://docs.microsoft.com/en-us/azure/azure-monitor/insights/vminsights-overview) enabled"
          },
          {
            "id": "b902566a-20d1-4137-9944-24fcd5f2fe1b",
            "version": "KqlParameterItem/1.0",
            "name": "_A_HeaderTextSuffix",
            "type": 1,
            "isRequired": false,
            "query": "print(iff(\"{ComputerName}\" == \"undefined\", \"in your workspace\", \"for your machine `{ComputerName}`\"));",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "fccd76d3-382b-4c2b-a39b-2653503c504b",
            "version": "KqlParameterItem/1.0",
            "name": "_A_HeaderStyle",
            "type": 1,
            "isRequired": false,
            "query": "print(iff(\"{ComputerName}\" == \"undefined\", \"\", \"margin:0;padding:0;\"));",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "_",
        "comparison": "isNotEqualTo",
        "value": null
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<h1 style=\"{_A_HeaderStyle}\">Connections Overview</h1>{_A_ComputerName}\r\n{_A_HeaderTextPrefix} {_A_HeaderTextSuffix}"
      },
      "conditionalVisibility": null
    },
    {
      "type": 1,
      "content": {
        "json": "---\r\n\r\n## Connection Statistics\r\n\r\nThe following table presents the connection statistics for computers in your workspace (max `10,000` rows).\r\n\r\nUse the <em>Hierarchy</em> dropdown for more detailed information for each computer but fewer computers will be shown if the total number of rows rendered exceeds `10,000`.\r\n\r\n<hr style=\"border: none;height: 2px;color: grey;\" />"
      },
      "conditionalVisibility": null
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "id": "306614b4-14f2-4777-a044-8c1121f04d6d",
            "version": "KqlParameterItem/1.0",
            "name": "GridRefresh",
            "type": 2,
            "isRequired": true,
            "value": "run",
            "isHiddenWhenLocked": true,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "jsonData": "[\r\n    { \"value\":\"pause\", \"label\":\"Pause\" },\r\n    { \"value\":\"run\", \"label\":\"Run\" }\r\n]",
            "timeContextFromParameter": null
          },
          {
            "id": "addcec31-b7ac-4715-a78d-9b803f86af8a",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "isRequired": true,
            "value": {
              "durationMs": 3600000,
              "createdTime": "2019-01-28T23:37:45.024Z",
              "isInitialTime": false,
              "grain": 1,
              "useDashboardTimeRange": false
            },
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000,
                  "createdTime": "2019-01-28T23:37:45.024Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 900000,
                  "createdTime": "2019-01-28T23:37:45.024Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 1800000,
                  "createdTime": "2019-01-28T23:37:45.024Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 3600000,
                  "createdTime": "2019-01-28T23:37:45.024Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 14400000,
                  "createdTime": "2019-01-28T23:37:45.024Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 43200000,
                  "createdTime": "2019-01-28T23:37:45.024Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 86400000,
                  "createdTime": "2019-01-28T23:37:45.025Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 172800000,
                  "createdTime": "2019-01-28T23:37:45.025Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 259200000,
                  "createdTime": "2019-01-28T23:37:45.025Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 604800000,
                  "createdTime": "2019-01-28T23:37:45.025Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 1209600000,
                  "createdTime": "2019-01-28T23:37:45.025Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 2592000000,
                  "createdTime": "2019-01-28T23:37:45.026Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 5184000000,
                  "createdTime": "2019-01-28T23:37:45.026Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 7776000000,
                  "createdTime": "2019-01-28T23:37:45.026Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                }
              ],
              "allowCustom": true
            },
            "timeContextFromParameter": null
          },
          {
            "id": "db9b2f1d-188a-4dda-af4a-b39deeb34da3",
            "version": "KqlParameterItem/1.0",
            "name": "Direction",
            "type": 2,
            "isRequired": true,
            "value": "outbound",
            "isHiddenWhenLocked": false,
            "jsonData": "[\r\n    { \"value\":\"inbound\", \"label\":\"Inbound\" },\r\n    { \"value\":\"outbound\", \"label\":\"Outbound\" }\r\n]",
            "timeContextFromParameter": null
          },
          {
            "id": "56ab6626-c12d-4de1-8a3d-8a6099db3cd3",
            "version": "KqlParameterItem/1.0",
            "name": "Hierarchy",
            "type": 2,
            "isRequired": true,
            "query": "datatable (value:string, Display:string)\r\n    [\"0\", \"Computer -> Process -> IP -> Port\",\r\n     \"1\", \"Computer -> Process -> IP\",\r\n     \"2\", \"Computer -> Process\",\r\n     \"3\", \"Computer\"]",
            "crossComponentResources": [],
            "value": "2",
            "isHiddenWhenLocked": false,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": null
    },
    {
      "type": 1,
      "content": {
        "json": "<p><strong>TimeRange</strong> specifies how far back in time to gather connection statistics. Selecting a large time range will result in a long query processing time.</p>\r\n<p><strong>Direction</strong> either shows <em>Inbound</em> or <em>Outbound</em> network connections.</p>\r\n<p><strong>Hierarchy</strong> specifies the level of detail for each computer. Selecting a larger hierarchy will cause fewer computers to be displayed but more information for each computer in the table below.</p>\r\n\r\n<hr style=\"height: 1px;\" />"
      },
      "conditionalVisibility": null
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Workspace}"
        ],
        "parameters": [
          {
            "id": "8744c427-f060-4725-95af-850af2fa08b1",
            "version": "KqlParameterItem/1.0",
            "name": "ComputerNameContains",
            "type": 1,
            "isRequired": false,
            "isHiddenWhenLocked": false,
            "timeContextFromParameter": null
          },
          {
            "id": "b141bd6c-cd8d-488e-a5f6-83ab00d31161",
            "version": "KqlParameterItem/1.0",
            "name": "Computers",
            "type": 2,
            "isRequired": false,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "VMConnection\r\n| where TimeGenerated {TimeRange}\r\n| where Computer contains '{ComputerNameContains}'\r\n| summarize by Computer\r\n| project Value = Computer, Display = Computer\r\n| order by Display asc\r\n| union (datatable(Value:string, Display:string)['*', 'All'])",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "value": [
              "*"
            ],
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "488d1f86-cabc-4fcc-8dc9-9a2e5803fb20",
            "version": "KqlParameterItem/1.0",
            "name": "ComputerFilter",
            "type": 1,
            "isRequired": true,
            "query": "let computerFilter = iff('*' in ({Computers}), \"| where Computer contains '{ComputerNameContains}'\", \"| where Computer in ({Computers})\");\r\nprint(computerFilter)",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": {
        "parameterName": "ComputerName",
        "comparison": "isEqualTo",
        "value": "undefined"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "<p><strong>ComputerNameContains</strong> by default will show <em>any</em> computers. Specify a string to narrow down the computers you are interested in so more data can be shown in the table below.</p>\r\n<p><strong>Computers</strong> by default all computers in the current workspace will be selected. Select one or more computers to further narrow down the table below.</p>\r\n\r\n<hr style=\"height: 1px;\" />"
      },
      "conditionalVisibility": {
        "parameterName": "ComputerName",
        "comparison": "isEqualTo",
        "value": "undefined"
      }
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Workspace}"
        ],
        "parameters": [
          {
            "id": "5e335a1b-7f99-4647-854a-d7b5cb489bb2",
            "version": "KqlParameterItem/1.0",
            "name": "ServiceMapComputers",
            "type": 1,
            "isRequired": true,
            "query": "print(strcat(\"let computers = ServiceMapComputer_CL \", iff(\"{ComputerName}\" == \"undefined\", \"\", \" | where Computer == '{ComputerName}'\"), \"| where 'run' == 'run' | where TimeGenerated > ago(1h) | summarize (TimeGenerated, Properties) = arg_max(TimeGenerated, pack_all()) by Computer;\"));",
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "c69fbaae-4fd2-4527-acdd-a2c358eebffa",
            "version": "KqlParameterItem/1.0",
            "name": "MaliciousIpData",
            "type": 1,
            "isRequired": false,
            "query": "print(strcat(\"let maliciousIpData = VMConnection\", iff(\"{ComputerName}\" == \"undefined\", \"\", \" | where Computer == '{ComputerName}'\"),\" | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | where MaliciousIp != '' | summarize argmax(TimeGenerated, *) by MaliciousIp | project MaliciousIp = strcat(max_TimeGenerated_Computer, '-', max_TimeGenerated_ProcessName, '-', MaliciousIp), Computer = max_TimeGenerated_Computer, Process = strcat(max_TimeGenerated_Computer, '-', max_TimeGenerated_ProcessName), MaliciousIpInfo = pack('Malicious IP', MaliciousIp, 'Is Active', max_TimeGenerated_IsActive, 'Indicator Threat Type', max_TimeGenerated_IndicatorThreatType, 'Remote Country', max_TimeGenerated_RemoteCountry, 'Longitude', max_TimeGenerated_RemoteLongitude, 'Latitude', max_TimeGenerated_RemoteLatitude, 'Confidence', max_TimeGenerated_Confidence, 'Severity', max_TimeGenerated_Severity, 'First Reported DateTime', max_TimeGenerated_FirstReportedDateTime, 'Last Reported DateTime', max_TimeGenerated_LastReportedDateTime, 'Report Reference Link', max_TimeGenerated_ReportReferenceLink);\"));\r\n",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "dd933ac8-1273-48fe-8d09-bd65d857ce83",
            "version": "KqlParameterItem/1.0",
            "name": "ComputerData",
            "type": 1,
            "isRequired": false,
            "query": "print(strcat(\"let computerData = VMConnection\", iff(\"{ComputerName}\" == \"undefined\", \"\", \" | where Computer == '{ComputerName}'\"), \" | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by  Name = strcat('🖥️ ', Computer), Type = 'Computer', TypeKey = 1, Key = Computer, ParentKey = '---' | join kind=leftouter (maliciousIpData | summarize MaliciousIpInfo = tostring(count()) by Computer) on $left.Key == $right.Computer | project-away Computer | order by Name asc;\"));",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "9789ead5-eae5-4f52-86c2-ac197da62f30",
            "version": "KqlParameterItem/1.0",
            "name": "Computer_Process_IP_Port",
            "type": 1,
            "isRequired": false,
            "query": "print(strcat(\"{ServiceMapComputers}\", \" let ipComputerMapping = computers | project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s)) | mvexpand Ipv4 to typeof(string); \", \"{MaliciousIpData}\", \" let totalMaliciousConnectionsCount = maliciousIpData | summarize MaliciousIpInfo = count() | extend Type = 'Overall'; \", \"{ComputerData}\", \" let processData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | where ProcessName != '' | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by  Computer, Name = strcat('🎫 ', ProcessName), Type = 'Process', TypeKey = 2, Key = strcat(Computer, '-', ProcessName), ParentKey = Computer | join kind=inner computerData on $left.ParentKey == $right.Key | project-away Name1, Responses1, LinksFailed1, MaxLinksLive1, TotalBytesSent1, TotalBytesReceived1, AverageResponseTime1, Type1, Key1, ParentKey1 | join kind=leftouter (maliciousIpData | summarize MaliciousIpInfo = tostring(count()) by Process) on $left.Key == $right.Process | project-away Process, MaliciousIpInfo | extend MaliciousIpInfo = tostring(MaliciousIpInfo1) | project-away MaliciousIpInfo1\t\t\t\t\t\t\t   | order by Name asc; let remoteIpData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where '{Direction}' == 'outbound' | where Direction == '{Direction}' {ComputerFilter} | extend RemoteIp = iff(Direction == 'outbound', DestinationIp, SourceIp) | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by Computer, ProcessName, RemoteIp, Type = 'Remote Computer', TypeKey = 3, Key = strcat(Computer, '-', ProcessName, '-', RemoteIp), ParentKey = strcat(Computer, '-', ProcessName) | join kind=inner processData on $left.ParentKey == $right.Key | project-away Name, Responses1, LinksFailed1, MaxLinksLive1, TotalBytesSent1, TotalBytesReceived1, AverageResponseTime1, Type1, Key1, ParentKey1 | join kind=leftouter maliciousIpData on $left.Key == $right.MaliciousIp | project-away MaliciousIp, Computer, Process, Computer1, Computer2, MaliciousIpInfo | extend MaliciousIpInfo = tostring(MaliciousIpInfo1) | project-away MaliciousIpInfo1 | join kind = leftouter (ipComputerMapping) on $left.RemoteIp == $right.Ipv4 | extend Name = iff(Computer == '', iff(RemoteIp == '127.0.0.1', '🌐 Localhost',  strcat('🌐 External (', RemoteIp, ')')), strcat('🖥️ ', Computer)) | project-away Computer, Ipv4 | order by Name desc; let destinationPortData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' | where '{Direction}' == 'outbound' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by Computer, ProcessName, DestinationIp, DestinationPort, Name = strcat('🔶 ', DestinationPort), Type = 'Remote Port', TypeKey = 4, Key = strcat(Computer, '-', ProcessName, '-', DestinationIp, '-', tostring(DestinationPort)), ParentKey = strcat(Computer, '-', ProcessName, '-', DestinationIp) | join kind=inner remoteIpData on $left.ParentKey == $right.Key | project-away Name1, Responses1, Type1, Key1, ParentKey1 | order by Name asc; let sourcePortData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated > ago(1h) | where Direction == '{Direction}' | where '{Direction}' == 'inbound' | where Computer contains '' | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by Computer, ProcessName, DestinationIp, DestinationPort, Name = strcat('🔶 ', DestinationPort), Type = 'Remote Port', TypeKey = 4, Key = strcat(Computer, '-', ProcessName, '-', tostring(DestinationPort)), ParentKey = strcat(Computer, '-', ProcessName) | join kind=inner     processData on $left.ParentKey == $right.Key | project-away Name1, AverageResponseTime1, Computer1, Key1, LinksFailed1, MaxLinksLive1, ParentKey1, Responses1, TotalBytesReceived1, TotalBytesSent1, Type1, TypeKey1, TypeKey2; let remoteIpDataInbound = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated > ago(1h) | where Direction == '{Direction}' | where '{Direction}' == 'inbound' | where Computer contains '' | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by Computer, ProcessName, RemoteIp, Type = 'Remote Computer', TypeKey = 3, Key = strcat(Computer, '-', ProcessName, '-', tostring(DestinationPort), '-', RemoteIp), ParentKey = strcat(Computer, '-', ProcessName, '-', tostring(DestinationPort)), Id = strcat(Computer, '-', ProcessName, '-', RemoteIp) | join kind=inner     sourcePortData on $left.ParentKey == $right.Key | project-away AverageResponseTime1, Computer1, Key1, LinksFailed1, MaxLinksLive1, ParentKey1, ProcessName1, Responses1, TotalBytesReceived1, TotalBytesSent1, Type1, TypeKey1 | order by Name asc | join kind=leftouter     ipComputerMapping on $left.RemoteIp == $right.Ipv4 | extend Name = iff(RemoteIp == '', 'Unknown',  strcat('🌐 External (', RemoteIp, ')')) | project-away Computer, Ipv4 | order by Name desc | join kind=leftouter     maliciousIpData on $left.Id == $right.MaliciousIp | project-away MaliciousIp, Computer, Process, Computer1, MaliciousIpInfo, Id | extend MaliciousIpInfo = tostring(MaliciousIpInfo1) | project-away MaliciousIpInfo1; let overalldata = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) | extend Name = '🔵 Overall', Type = 'Overall', TypeKey = 0, Key = '--Overall--', ParentKey = '----' | join kind=leftouter totalMaliciousConnectionsCount on Type | extend MaliciousIpInfo = iff(MaliciousIpInfo == '0', '', tostring(MaliciousIpInfo)) | project-away Type1; computerData | union processData | union remoteIpData | union destinationPortData | union remoteIpDataInbound | union sourcePortData | union overalldata\t\t\t\t\t\t\t | extend MaliciousConnectionsCount = iff(MaliciousIpInfo == '', 0, iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', tolong(MaliciousIpInfo), 1)) | project Name, Type, MaliciousConnections = iff(MaliciousIpInfo == '', '✅ No Malicious Connections', iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', iff(MaliciousConnectionsCount > 1, strcat('❌ ', MaliciousIpInfo, ' Malicious Connections'), strcat('❌ ', MaliciousIpInfo, ' Malicious Connection')), '❌ Malicious Connection')), Responses, MaxLinksLive, LinksFailed, AverageResponseTime, TotalBytesSent, TotalBytesReceived, Info = iff(MaliciousIpInfo != '', MaliciousIpInfo, ''), Key, ParentKey, TypeKey, MaliciousConnectionsCount | order by TypeKey asc, MaliciousConnectionsCount desc, LinksFailed desc, AverageResponseTime desc, Responses desc, MaxLinksLive desc, Name asc | project-away TypeKey\"));\r\n",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "0d6a320e-2cef-44fd-ac0b-ad833f8d0c03",
            "version": "KqlParameterItem/1.0",
            "name": "Computer_Process_IP",
            "type": 1,
            "isRequired": false,
            "query": "print(strcat(\"{ServiceMapComputers}\", \" let ipComputerMapping = computers | project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s)) | mvexpand Ipv4 to typeof(string); \", \"{MaliciousIpData}\", \" let totalMaliciousConnectionsCount = maliciousIpData | summarize MaliciousIpInfo = count() | extend Type = 'Overall'; \", \"{ComputerData}\", \" let processData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | where ProcessName != '' | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by  Computer, Name = strcat('🎫 ', ProcessName), Type = 'Process', TypeKey = 2, Key = strcat(Computer, '-', ProcessName), ParentKey = Computer | join kind=inner computerData on $left.ParentKey == $right.Key | project-away Name1, Responses1, LinksFailed1, MaxLinksLive1, TotalBytesSent1, TotalBytesReceived1, AverageResponseTime1, Type1, Key1, ParentKey1 | join kind=leftouter (maliciousIpData | summarize MaliciousIpInfo = tostring(count()) by Process) on $left.Key == $right.Process | project-away Process, MaliciousIpInfo | extend MaliciousIpInfo = tostring(MaliciousIpInfo1) | project-away MaliciousIpInfo1\t\t\t\t\t\t\t   | order by Name asc; let remoteIpData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | extend RemoteIp = iff(Direction == 'outbound', DestinationIp, SourceIp) | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by Computer, ProcessName, RemoteIp, Type = 'Remote Computer', TypeKey = 3, Key = strcat(Computer, '-', ProcessName, '-', RemoteIp), ParentKey = strcat(Computer, '-', ProcessName) | join kind=inner processData on $left.ParentKey == $right.Key | project-away Name, Responses1, LinksFailed1, MaxLinksLive1, TotalBytesSent1, TotalBytesReceived1, AverageResponseTime1, Type1, Key1, ParentKey1 | join kind=leftouter maliciousIpData on $left.Key == $right.MaliciousIp | project-away MaliciousIp, Computer, Process, Computer1, Computer2, MaliciousIpInfo | extend MaliciousIpInfo = tostring(MaliciousIpInfo1) | project-away MaliciousIpInfo1 | join kind = leftouter (ipComputerMapping) on $left.RemoteIp == $right.Ipv4 | extend Name = iff(Computer == '', iff(RemoteIp == '127.0.0.1', '🌐 Localhost',  strcat('🌐 External (', RemoteIp, ')')), strcat('🖥️ ', Computer)) | project-away Computer, Ipv4 | order by Name desc; let overalldata = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) | extend Name = '🔵 Overall', Type = 'Overall', TypeKey = 0, Key = '--Overall--', ParentKey = '----' | join kind=leftouter totalMaliciousConnectionsCount on Type | extend MaliciousIpInfo = iff(MaliciousIpInfo == '0', '', tostring(MaliciousIpInfo)) | project-away Type1; computerData | union processData | union remoteIpData | union overalldata\t\t\t\t\t\t\t | extend MaliciousConnectionsCount = iff(MaliciousIpInfo == '', 0, iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', tolong(MaliciousIpInfo), 1)) | project Name, Type, MaliciousConnections = iff(MaliciousIpInfo == '', '✅ No Malicious Connections', iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', iff(MaliciousConnectionsCount > 1, strcat('❌ ', MaliciousIpInfo, ' Malicious Connections'), strcat('❌ ', MaliciousIpInfo, ' Malicious Connection')), '❌ Malicious Connection')), Responses, MaxLinksLive, LinksFailed, AverageResponseTime, TotalBytesSent, TotalBytesReceived, Info = iff(MaliciousIpInfo != '', MaliciousIpInfo, ''), Key, ParentKey, TypeKey, MaliciousConnectionsCount | order by TypeKey asc, MaliciousConnectionsCount desc, LinksFailed desc, AverageResponseTime desc, Responses desc, MaxLinksLive desc, Name asc | project-away TypeKey\"));\r\n",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "e8f2c394-18e8-4d6d-8f5e-8453cb67128c",
            "version": "KqlParameterItem/1.0",
            "name": "Computer_Process",
            "type": 1,
            "isRequired": false,
            "query": "print(strcat(\"{ServiceMapComputers}\", \" let ipComputerMapping = computers | project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s)) | mvexpand Ipv4 to typeof(string); \", \"{MaliciousIpData}\", \" let totalMaliciousConnectionsCount = maliciousIpData | summarize MaliciousIpInfo = count() | extend Type = 'Overall'; \", \"{ComputerData}\", \" let processData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | where ProcessName != '' | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by  Computer, Name = strcat('🎫 ', ProcessName), Type = 'Process', TypeKey = 2, Key = strcat(Computer, '-', ProcessName), ParentKey = Computer | join kind=inner computerData on $left.ParentKey == $right.Key | project-away Name1, Responses1, LinksFailed1, MaxLinksLive1, TotalBytesSent1, TotalBytesReceived1, AverageResponseTime1, Type1, Key1, ParentKey1 | join kind=leftouter (maliciousIpData | summarize MaliciousIpInfo = tostring(count()) by Process) on $left.Key == $right.Process | project-away Process, MaliciousIpInfo | extend MaliciousIpInfo = tostring(MaliciousIpInfo1) | project-away MaliciousIpInfo1\t\t\t\t\t\t\t   | order by Name asc; let overalldata = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) | extend Name = '🔵 Overall', Type = 'Overall', TypeKey = 0, Key = '--Overall--', ParentKey = '----' | join kind=leftouter totalMaliciousConnectionsCount on Type | extend MaliciousIpInfo = iff(MaliciousIpInfo == '0', '', tostring(MaliciousIpInfo)) | project-away Type1; computerData | union processData | union overalldata\t\t\t\t\t\t\t | extend MaliciousConnectionsCount = iff(MaliciousIpInfo == '', 0, iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', tolong(MaliciousIpInfo), 1)) | project Name, Type, MaliciousConnections = iff(MaliciousIpInfo == '', '✅ No Malicious Connections', iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', iff(MaliciousConnectionsCount > 1, strcat('❌ ', MaliciousIpInfo, ' Malicious Connections'), strcat('❌ ', MaliciousIpInfo, ' Malicious Connection')), '❌ Malicious Connection')), Responses, MaxLinksLive, LinksFailed, AverageResponseTime, TotalBytesSent, TotalBytesReceived, Info = iff(MaliciousIpInfo != '', MaliciousIpInfo, ''), Key, ParentKey, TypeKey, MaliciousConnectionsCount | order by TypeKey asc, MaliciousConnectionsCount desc, LinksFailed desc, AverageResponseTime desc, Responses desc, MaxLinksLive desc, Name asc | project-away TypeKey\"));\r\n",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "a4b0e146-7c89-40bb-ade2-ed2e392e9311",
            "version": "KqlParameterItem/1.0",
            "name": "Computer",
            "type": 1,
            "isRequired": false,
            "query": "print(strcat(\"{ServiceMapComputers}\", \" let ipComputerMapping = computers | project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s)) | mvexpand Ipv4 to typeof(string); \", \"{MaliciousIpData}\", \" let totalMaliciousConnectionsCount = maliciousIpData | summarize MaliciousIpInfo = count() | extend Type = 'Overall'; \", \"{ComputerData}\", \" let overalldata = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) | extend Name = '🔵 Overall', Type = 'Overall', TypeKey = 0, Key = '--Overall--', ParentKey = '----' | join kind=leftouter totalMaliciousConnectionsCount on Type | extend MaliciousIpInfo = iff(MaliciousIpInfo == '0', '', tostring(MaliciousIpInfo)) | project-away Type1; computerData | union overalldata\t\t\t\t\t\t\t | extend MaliciousConnectionsCount = iff(MaliciousIpInfo == '', 0, iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', tolong(MaliciousIpInfo), 1)) | project Name, Type, MaliciousConnections = iff(MaliciousIpInfo == '', '✅ No Malicious Connections', iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', iff(MaliciousConnectionsCount > 1, strcat('❌ ', MaliciousIpInfo, ' Malicious Connections'), strcat('❌ ', MaliciousIpInfo, ' Malicious Connection')), '❌ Malicious Connection')), Responses, MaxLinksLive, LinksFailed, AverageResponseTime, TotalBytesSent, TotalBytesReceived, Info = iff(MaliciousIpInfo != '', MaliciousIpInfo, ''), Key, ParentKey, TypeKey, MaliciousConnectionsCount | order by TypeKey asc, MaliciousConnectionsCount desc, LinksFailed desc, AverageResponseTime desc, Responses desc, MaxLinksLive desc, Name asc | project-away TypeKey\"));\r\n",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "a08757da-e72b-474d-a1d2-65fb7020cc14",
            "version": "KqlParameterItem/1.0",
            "name": "FinalQuery",
            "type": 1,
            "isRequired": false,
            "query": "print(\r\niff({Hierarchy} == 0, \"{Computer_Process_IP_Port}\", \r\niff({Hierarchy} == 1, \"{Computer_Process_IP}\",\r\niff({Hierarchy} == 2, \"{Computer_Process}\",\r\niff({Hierarchy} == 3, \"{Computer}\", \"{Computer}\")))));",
            "crossComponentResources": [
              "{Workspace}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "874eeebe-2ea2-4c04-a3b9-ab3b30e95573",
            "version": "KqlParameterItem/1.0",
            "name": "ConnectionGrid",
            "type": 1,
            "isRequired": false,
            "value": "{}",
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null
          }
        ],
        "style": "above",
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": null
    },
    {
      "type": 1,
      "content": {
        "json": "💡 <em>Select a computer from the table below to view connection details for that machine.</em>"
      },
      "conditionalVisibility": null
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{FinalQuery:value}",
        "showQuery": false,
        "size": 2,
        "aggregation": 0,
        "showAnnotations": false,
        "exportParameterName": "ConnectionGrid",
        "showAnalytics": false,
        "noDataMessage": "No Machines reporting to this workspace.",
        "timeContextFromParameter": null,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspace}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Responses",
              "formatter": 4,
              "formatOptions": {
                "palette": "blueDark"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxLinksLive",
              "formatter": 4,
              "formatOptions": {
                "palette": "lightBlue"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LinksFailed",
              "formatter": 4,
              "formatOptions": {
                "palette": "red"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AverageResponseTime",
              "formatter": 4,
              "formatOptions": {
                "palette": "purple"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalBytesSent",
              "formatter": 4,
              "formatOptions": {
                "palette": "orange"
              },
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalBytesReceived",
              "formatter": 4,
              "formatOptions": {
                "palette": "green"
              },
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Info",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "CellDetails",
                "linkLabel": "ℹ️ Info"
              }
            },
            {
              "columnMatch": "Key",
              "formatter": 5,
              "formatOptions": {}
            },
            {
              "columnMatch": "ParentKey",
              "formatter": 5,
              "formatOptions": {}
            },
            {
              "columnMatch": "MaliciousConnectionsCount",
              "formatter": 5,
              "formatOptions": {}
            },
            {
              "columnMatch": "Computer",
              "formatter": 5,
              "formatOptions": {}
            },
            {
              "columnMatch": "DestinationPort",
              "formatter": 1,
              "formatOptions": {},
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000,
          "filter": true,
          "hierarchySettings": {
            "idColumn": "Key",
            "parentColumn": "ParentKey",
            "treeType": 0,
            "expanderColumn": "Name",
            "expandTopLevel": false
          }
        },
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "Computer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "KPIValue",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibility": null
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "id": "4c14e89e-dbd3-421b-a041-c8fc87ce6e43",
            "version": "KqlParameterItem/1.0",
            "name": "SourceComputer",
            "type": 1,
            "isRequired": true,
            "query": "let row = dynamic({ConnectionGrid});\r\nlet computer = tostring(row.Key);\r\nrange i from 1 to 1 step 1\r\n| project computer",
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "238d2334-e164-411d-b99a-70095fce615f",
            "version": "KqlParameterItem/1.0",
            "name": "ChildComputer",
            "type": 1,
            "isRequired": true,
            "query": "print 'any'",
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "dcf5f274-fbbf-4fb8-8c35-6b528a08cac9",
            "version": "KqlParameterItem/1.0",
            "name": "IsComputer",
            "type": 1,
            "isRequired": true,
            "query": "let row = dynamic({ConnectionGrid});\r\nlet isComputer = row.ParentKey == '---';\r\nprint strcat(isComputer)",
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": null
    },
    {
      "type": 1,
      "content": {
        "json": "## Selected Machine: {SourceComputer}"
      },
      "conditionalVisibility": {
        "parameterName": "IsComputer",
        "comparison": "isEqualTo",
        "value": "True"
      }
    },
    {
      "type": 1,
      "content": {
        "json": "### Responses"
      },
      "conditionalVisibility": {
        "parameterName": "IsComputer",
        "comparison": "isEqualTo",
        "value": "True"
      },
      "customWidth": "25"
    },
    {
      "type": 1,
      "content": {
        "json": "## Latency"
      },
      "conditionalVisibility": {
        "parameterName": "IsComputer",
        "comparison": "isEqualTo",
        "value": "True"
      },
      "customWidth": "25"
    },
    {
      "type": 1,
      "content": {
        "json": "## Network"
      },
      "conditionalVisibility": {
        "parameterName": "IsComputer",
        "comparison": "isEqualTo",
        "value": "True"
      },
      "customWidth": "25"
    },
    {
      "type": 1,
      "content": {
        "json": "## Links"
      },
      "conditionalVisibility": {
        "parameterName": "IsComputer",
        "comparison": "isEqualTo",
        "value": "True"
      },
      "customWidth": "25"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let length = strlen('{ChildComputer}');\r\nlet SourceMachine = iff('{SourceComputer}' contains '🖥️', substring('{SourceComputer}', 3), '{SourceComputer}');\r\nlet ChildMachine = iff('{ChildComputer}' contains '🖥️', substring('{ChildComputer}', 3), \r\n                        iff('{ChildComputer}' contains '🔸',  substring('{ChildComputer}', 2), \r\n                        iff('{ChildComputer}' contains \"External\", substring('{ChildComputer}', 12, length - 13), '{ChildComputer}')));\r\nlet SouceMachineData = VMConnection\r\n| where TimeGenerated {TimeRange}\r\n| where Computer == SourceMachine\r\n| where ChildMachine == \"any\"\r\n| where Direction == '{Direction}'\r\n| summarize Computer = sum(Responses) by bin(TimeGenerated, time('{TimeRange:grain}')), Type = SourceMachine;\r\nlet computers = ServiceMapComputer_CL\r\n| where TimeGenerated {TimeRange}\r\n| summarize (TimeGenerated, Properties) = arg_max(TimeGenerated, pack_all()) by Computer;\r\nlet ipComputerMapping = computers \r\n| project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s))\r\n| mvexpand Ipv4 to typeof(string);\r\nlet remoteMachineIps = ipComputerMapping\r\n| where Computer == ChildMachine\r\n| project Ipv4;\r\nlet ConnectionData = VMConnection\r\n| where TimeGenerated {TimeRange}\r\n| where Computer == SourceMachine\r\n| where RemoteIp in (remoteMachineIps) or RemoteIp == ChildMachine\r\n| where Direction == '{Direction}'\r\n| summarize Computer = sum(Responses) by bin(TimeGenerated, time('{TimeRange:grain}')), Type = ChildMachine;\r\nSouceMachineData\r\n| union ConnectionData",
        "showQuery": false,
        "size": 1,
        "aggregation": 0,
        "showAnnotations": false,
        "showAnalytics": false,
        "timeContextFromParameter": null,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "areachart"
      },
      "conditionalVisibility": {
        "parameterName": "IsComputer",
        "comparison": "isEqualTo",
        "value": "True"
      },
      "customWidth": "25"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let length = strlen('{ChildComputer}');\r\nlet SourceMachine = iff('{SourceComputer}' contains '🖥️', substring('{SourceComputer}', 3), '{SourceComputer}');\r\nlet ChildMachine = iff('{ChildComputer}' contains '🖥️', substring('{ChildComputer}', 3), \r\n                        iff('{ChildComputer}' contains '🔸',  substring('{ChildComputer}', 2), \r\n                        iff('{ChildComputer}' contains \"External\", substring('{ChildComputer}', 12, length - 13), '{ChildComputer}')));\r\nlet SouceMachineData = VMConnection\r\n| where TimeGenerated {TimeRange}\r\n| where Computer == SourceMachine\r\n| where ChildMachine == \"any\"\r\n| where Direction == '{Direction}'\r\n| summarize P50 = percentiles(ResponseTimeSum, 50), P90 = percentiles(ResponseTimeSum, 90), P95 = percentiles(ResponseTimeSum, 95) by bin(TimeGenerated, time('{TimeRange:grain}'));\r\nlet computers = ServiceMapComputer_CL\r\n| where TimeGenerated {TimeRange}\r\n| summarize (TimeGenerated, Properties) = arg_max(TimeGenerated, pack_all()) by Computer;\r\nlet ipComputerMapping = computers \r\n| project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s))\r\n| mvexpand Ipv4 to typeof(string);\r\nlet remoteMachineIps = ipComputerMapping\r\n| where Computer == ChildMachine\r\n| project Ipv4;\r\nlet ConnectionData = VMConnection\r\n| where TimeGenerated {TimeRange}\r\n| where Computer == SourceMachine\r\n| where RemoteIp in (remoteMachineIps) or RemoteIp == ChildMachine\r\n| where Direction == '{Direction}'\r\n| summarize P50 = percentiles(ResponseTimeSum, 50), P90 = percentiles(ResponseTimeSum, 90), P95 = percentiles(ResponseTimeSum, 95) by bin(TimeGenerated, time('{TimeRange:grain}'));\r\nSouceMachineData\r\n| union ConnectionData",
        "showQuery": false,
        "size": 1,
        "aggregation": 0,
        "showAnnotations": false,
        "showAnalytics": false,
        "timeContextFromParameter": null,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "linechart"
      },
      "conditionalVisibility": {
        "parameterName": "IsComputer",
        "comparison": "isEqualTo",
        "value": "True"
      },
      "customWidth": "25"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let length = strlen('{ChildComputer}');\r\nlet SourceMachine = iff('{SourceComputer}' contains '🖥️', substring('{SourceComputer}', 3), '{SourceComputer}');\r\nlet ChildMachine = iff('{ChildComputer}' contains '🖥️', substring('{ChildComputer}', 3), \r\n                        iff('{ChildComputer}' contains '🔸',  substring('{ChildComputer}', 2), \r\n                        iff('{ChildComputer}' contains \"External\", substring('{ChildComputer}', 12, length - 13), '{ChildComputer}')));\r\nlet SouceMachineData = VMConnection\r\n| where TimeGenerated {TimeRange}\r\n| where Computer == SourceMachine\r\n| where ChildMachine == \"any\"\r\n| where Direction == '{Direction}'\r\n| summarize Sent = sum(BytesSent), Received = sum(BytesReceived) by bin(TimeGenerated, time('{TimeRange:grain}')), Type = SourceMachine;\r\nlet computers = ServiceMapComputer_CL\r\n| where TimeGenerated {TimeRange}\r\n| summarize (TimeGenerated, Properties) = arg_max(TimeGenerated, pack_all()) by Computer;\r\nlet ipComputerMapping = computers \r\n| project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s))\r\n| mvexpand Ipv4 to typeof(string);\r\nlet remoteMachineIps = ipComputerMapping\r\n| where Computer == ChildMachine\r\n| project Ipv4;\r\nlet ConnectionData = VMConnection\r\n| where TimeGenerated {TimeRange}\r\n| where Computer == SourceMachine\r\n| where RemoteIp in (remoteMachineIps) or RemoteIp == ChildMachine\r\n| where Direction == '{Direction}'\r\n| summarize Sent = sum(BytesSent), Received = sum(BytesReceived) by bin(TimeGenerated, time('{TimeRange:grain}')), Type = ChildMachine;\r\nSouceMachineData\r\n| union ConnectionData",
        "showQuery": false,
        "size": 1,
        "aggregation": 0,
        "showAnnotations": false,
        "showAnalytics": false,
        "timeContextFromParameter": null,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "areachart"
      },
      "conditionalVisibility": {
        "parameterName": "IsComputer",
        "comparison": "isEqualTo",
        "value": "True"
      },
      "customWidth": "25"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "let length = strlen('{ChildComputer}');\r\nlet SourceMachine = iff('{SourceComputer}' contains '🖥️', substring('{SourceComputer}', 3), '{SourceComputer}');\r\nlet ChildMachine = iff('{ChildComputer}' contains '🖥️', substring('{ChildComputer}', 3), \r\n                        iff('{ChildComputer}' contains '🔸',  substring('{ChildComputer}', 2), \r\n                        iff('{ChildComputer}' contains \"External\", substring('{ChildComputer}', 12, length - 13), '{ChildComputer}')));\r\nlet SouceMachineData = VMConnection\r\n| where TimeGenerated {TimeRange}\r\n| where Computer == SourceMachine\r\n| where ChildMachine == \"any\"\r\n| where Direction == '{Direction}'\r\n| summarize MaxOpenPorts = max(LinksLive), SumFailed = sum(LinksFailed) by bin(TimeGenerated, time('{TimeRange:grain}')), Type = SourceMachine;\r\nlet computers = ServiceMapComputer_CL\r\n| where TimeGenerated {TimeRange}\r\n| summarize (TimeGenerated, Properties) = arg_max(TimeGenerated, pack_all()) by Computer;\r\nlet ipComputerMapping = computers \r\n| project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s))\r\n| mvexpand Ipv4 to typeof(string);\r\nlet remoteMachineIps = ipComputerMapping\r\n| where Computer == ChildMachine\r\n| project Ipv4;\r\nlet ConnectionData = VMConnection\r\n| where TimeGenerated {TimeRange}\r\n| where Computer == SourceMachine\r\n| where RemoteIp in (remoteMachineIps) or RemoteIp == ChildMachine\r\n| where Direction == '{Direction}'\r\n| summarize MaxOpenPorts = max(LinksLive), SumFailed = sum(LinksFailed) by bin(TimeGenerated, time('{TimeRange:grain}')), Type = ChildMachine;\r\nSouceMachineData\r\n| union ConnectionData",
        "showQuery": false,
        "size": 1,
        "aggregation": 3,
        "showAnnotations": false,
        "showAnalytics": false,
        "timeContextFromParameter": null,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "visualization": "areachart"
      },
      "conditionalVisibility": {
        "parameterName": "IsComputer",
        "comparison": "isEqualTo",
        "value": "True"
      },
      "customWidth": "25"
    }
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}

{
  "version": "Notebook/1.0",
  "isLocked": true,
  "items": [
    {
      "type": 1,
      "content": {
        "json": "# Virtual Machine Connections Overview\nNote: Below analysis is generated using 'VMConnection' table. Computers can emit this data by enabling 'Azure Monitor for VMs (preview)'.\n\nFor more details, please take a look at [Azure Monitor for VMs (preview)](https://docs.microsoft.com/en-us/azure/azure-monitor/insights/vminsights-overview)\n\n"
      },
      "conditionalVisibility": null
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "id": "e41c2177-932a-4c58-ba24-03ef070eb197",
            "version": "KqlParameterItem/1.0",
            "name": "Workspaces",
            "type": 5,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "value": [
                "value::1"
            ],
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "resourceTypeFilter": {
                "microsoft.operationalinsights/workspaces": true
              },
              "additionalResourceOptions": [
                "value::1"
              ]
            },
            "timeContextFromParameter": null
          },
          {
            "id": "5f8cce4b-9c4c-47da-8683-7e5ccc9faed3",
            "version": "KqlParameterItem/1.0",
            "name": "TimeRange",
            "type": 4,
            "isRequired": false,
            "value": {
              "durationMs": 3600000,
              "createdTime": "2018-10-04T22:01:18.372Z",
              "isInitialTime": false,
              "grain": 1,
              "useDashboardTimeRange": false
            },
            "isHiddenWhenLocked": false,
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000,
                  "createdTime": "2018-10-04T22:01:18.372Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 900000,
                  "createdTime": "2018-10-04T22:01:18.372Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 1800000,
                  "createdTime": "2018-10-04T22:01:18.372Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 3600000,
                  "createdTime": "2018-10-04T22:01:18.372Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 14400000,
                  "createdTime": "2018-10-04T22:01:18.374Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 43200000,
                  "createdTime": "2018-10-04T22:01:18.374Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 86400000,
                  "createdTime": "2018-10-04T22:01:18.374Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 172800000,
                  "createdTime": "2018-10-04T22:01:18.374Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 259200000,
                  "createdTime": "2018-10-04T22:01:18.375Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 604800000,
                  "createdTime": "2018-10-04T22:01:18.375Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 1209600000,
                  "createdTime": "2018-10-04T22:01:18.375Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 2592000000,
                  "createdTime": "2018-10-04T22:01:18.375Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 5184000000,
                  "createdTime": "2018-10-04T22:01:18.375Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                },
                {
                  "durationMs": 7776000000,
                  "createdTime": "2018-10-04T22:01:18.375Z",
                  "isInitialTime": false,
                  "grain": 1,
                  "useDashboardTimeRange": false
                }
              ],
              "allowCustom": true
            }
          }
        ],
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": null
    },
    {
      "type": 1,
      "content": {
        "json": "### Number of records ingested from all the computers in Workspace(s): ({Workspaces:label}) and for Time Range: {TimeRange}\n\n"
      },
      "conditionalVisibility": null
    },
    {
      "type": 1,
      "content": {
        "json": "### Inbound vs Outbound Records\n\n"
      },
      "conditionalVisibility": null,
      "customWidth": "33"
    },
    {
      "type": 1,
      "content": {
        "json": "### Number of Records (Inbound + Outbound) by Country"
      },
      "conditionalVisibility": null,
      "customWidth": "67"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "VMConnection\r\n| where TimeGenerated {TimeRange}\r\n| summarize Count = count() by Direction",
        "showQuery": false,
        "size": 1,
        "aggregation": 0,
        "showAnnotations": false,
        "showAnalytics": false,
        "timeContextFromParameter": null,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "piechart"
      },
      "conditionalVisibility": null,
      "customWidth": "33"
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "VMConnection\r\n| where TimeGenerated {TimeRange}\r\n| summarize Count = count() by RemoteCountry, bin(TimeGenerated, {TimeRange:grain})",
        "showQuery": false,
        "size": 1,
        "aggregation": 0,
        "showAnnotations": true,
        "showAnalytics": false,
        "timeContextFromParameter": null,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "areachart"
      },
      "conditionalVisibility": null,
      "customWidth": "67"
    },
    {
      "type": 1,
      "content": {
        "json": "---"
      },
      "conditionalVisibility": null
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [],
        "parameters": [
          {
            "id": "306614b4-14f2-4777-a044-8c1121f04d6d",
            "version": "KqlParameterItem/1.0",
            "name": "GridRefresh",
            "type": 2,
            "isRequired": true,
            "value": "run",
            "isHiddenWhenLocked": false,
            "jsonData": "[\r\n    { \"value\":\"pause\", \"label\":\"Pause\" },\r\n    { \"value\":\"run\", \"label\":\"Run\" }\r\n]",
            "timeContextFromParameter": null
          },
          {
            "id": "db9b2f1d-188a-4dda-af4a-b39deeb34da3",
            "version": "KqlParameterItem/1.0",
            "name": "Direction",
            "type": 2,
            "isRequired": true,
            "value": "outbound",
            "isHiddenWhenLocked": false,
            "jsonData": "[\r\n    { \"value\":\"inbound\", \"label\":\"Inbound\" },\r\n    { \"value\":\"outbound\", \"label\":\"Outbound\" }\r\n]",
            "timeContextFromParameter": null
          },
          {
            "id": "8744c427-f060-4725-95af-850af2fa08b1",
            "version": "KqlParameterItem/1.0",
            "name": "ComputerNameContains",
            "type": 1,
            "isRequired": false,
            "value": "",
            "isHiddenWhenLocked": false,
            "timeContextFromParameter": null
          },
          {
            "id": "b141bd6c-cd8d-488e-a5f6-83ab00d31161",
            "version": "KqlParameterItem/1.0",
            "name": "Computers",
            "type": 2,
            "isRequired": false,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "VMConnection\r\n| where TimeGenerated {TimeRange}\r\n| where Computer contains '{ComputerNameContains}'\r\n| summarize by Computer\r\n| project Value = Computer, Display = Computer, IsDefault = false\r\n| order by Display asc\r\n| union (datatable(Value:string, Display:string, IsDefault:boolean)['*', 'All', true])",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": [
              "*"
            ],
            "isHiddenWhenLocked": false,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "488d1f86-cabc-4fcc-8dc9-9a2e5803fb20",
            "version": "KqlParameterItem/1.0",
            "name": "ComputerFilter",
            "type": 1,
            "isRequired": true,
            "query": "let computerFilter = iff('*' in ({Computers}), \"| where Computer contains '{ComputerNameContains}'\", \"| where Computer in ({Computers})\");\r\nprint(computerFilter)",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": null
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "query": "",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "parameters": [
          {
            "id": "9789ead5-eae5-4f52-86c2-ac197da62f30",
            "version": "KqlParameterItem/1.0",
            "name": "CPIP",
            "type": 1,
            "isRequired": false,
            "query": "print(\"let computers = ServiceMapComputer_CL | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | summarize (TimeGenerated, Properties) = arg_max(TimeGenerated, pack_all()) by Computer; let ipComputerMapping = computers | project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s)) | mvexpand Ipv4 to typeof(string); let maliciousIpData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | where MaliciousIp != '' | summarize argmax(TimeGenerated, *) by MaliciousIp | project MaliciousIp = strcat(max_TimeGenerated_Computer, '-', max_TimeGenerated_ProcessName, '-', MaliciousIp), Computer = max_TimeGenerated_Computer, Process = strcat(max_TimeGenerated_Computer, '-', max_TimeGenerated_ProcessName), MaliciousIpInfo = pack('Malicious IP', MaliciousIp, 'Is Active', max_TimeGenerated_IsActive, 'Indicator Threat Type', max_TimeGenerated_IndicatorThreatType, 'Remote Country', max_TimeGenerated_RemoteCountry, 'Longitude', max_TimeGenerated_RemoteLongitude, 'Latitude', max_TimeGenerated_RemoteLatitude, 'Confidence', max_TimeGenerated_Confidence, 'Severity', max_TimeGenerated_Severity, 'First Reported DateTime', max_TimeGenerated_FirstReportedDateTime, 'Last Reported DateTime', max_TimeGenerated_LastReportedDateTime, 'Report Reference Link', max_TimeGenerated_ReportReferenceLink); let totalMaliciousConnectionsCount = maliciousIpData | summarize MaliciousIpInfo = count() | extend Type = 'Overall'; let computerData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by  Name = strcat('🖥️ ', Computer), Type = 'Computer', TypeKey = 1, Key = Computer, ParentKey = '---' | join kind=leftouter (maliciousIpData | summarize MaliciousIpInfo = tostring(count()) by Computer) on $left.Key == $right.Computer | project-away Computer | order by Name asc; let processData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | where ProcessName != '' | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by  Computer, Name = strcat('🎫 ', ProcessName), Type = 'Process', TypeKey = 2, Key = strcat(Computer, '-', ProcessName), ParentKey = Computer | join kind=inner computerData on $left.ParentKey == $right.Key | project-away Name1, Responses1, LinksFailed1, MaxLinksLive1, TotalBytesSent1, TotalBytesReceived1, AverageResponseTime1, Type1, Key1, ParentKey1 | join kind=leftouter (maliciousIpData | summarize MaliciousIpInfo = tostring(count()) by Process) on $left.Key == $right.Process | project-away Process, MaliciousIpInfo | extend MaliciousIpInfo = tostring(MaliciousIpInfo1) | project-away MaliciousIpInfo1\t\t\t\t\t\t\t   | order by Name asc; let remoteIpData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | extend RemoteIp = iff(Direction == 'outbound', DestinationIp, SourceIp) | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by Computer, ProcessName, RemoteIp, Type = 'Remote Computer', TypeKey = 3, Key = strcat(Computer, '-', ProcessName, '-', RemoteIp), ParentKey = strcat(Computer, '-', ProcessName) | join kind=inner processData on $left.ParentKey == $right.Key | project-away Name, Responses1, LinksFailed1, MaxLinksLive1, TotalBytesSent1, TotalBytesReceived1, AverageResponseTime1, Type1, Key1, ParentKey1 | join kind=leftouter maliciousIpData on $left.Key == $right.MaliciousIp | project-away MaliciousIp, Computer, Process, Computer1, Computer2, MaliciousIpInfo | extend MaliciousIpInfo = tostring(MaliciousIpInfo1) | project-away MaliciousIpInfo1 | join kind = leftouter (ipComputerMapping) on $left.RemoteIp == $right.Ipv4 | extend Name = iff(Computer == '', iff(RemoteIp == '127.0.0.1', '🌐 Localhost',  strcat('🌐 External (', RemoteIp, ')')), strcat('🖥️ ', Computer)) | project-away Computer, Ipv4 | order by Name desc; let destinationPortData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' | where '{Direction}' == 'outbound' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by Computer, ProcessName, DestinationIp, DestinationPort, Name = strcat('🔶 ', DestinationPort), Type = 'Remote Port', TypeKey = 4, Key = strcat(Computer, '-', ProcessName, '-', DestinationIp, '-', tostring(DestinationPort)), ParentKey = strcat(Computer, '-', ProcessName, '-', DestinationIp) | join kind=inner remoteIpData on $left.ParentKey == $right.Key | project-away Name1, Responses1, Type1, Key1, ParentKey1 | order by Name asc; let overalldata = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) | extend Name = '💎 Overall', Type = 'Overall', TypeKey = 0, Key = '--Overall--', ParentKey = '----' | join kind=leftouter totalMaliciousConnectionsCount on Type | extend MaliciousIpInfo = iff(MaliciousIpInfo == '0', '', tostring(MaliciousIpInfo)) | project-away Type1; computerData | union processData | union remoteIpData | union destinationPortData | union overalldata\t\t\t\t\t\t\t | extend MaliciousConnectionsCount = iff(MaliciousIpInfo == '', 0, iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', tolong(MaliciousIpInfo), 1)) | project Name, Type, MaliciousConnections = iff(MaliciousIpInfo == '', '✅ No Malicious Connections', iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', iff(MaliciousConnectionsCount > 1, strcat('❌ ', MaliciousIpInfo, ' Malicious Connections'), strcat('❌ ', MaliciousIpInfo, ' Malicious Connection')), '❌ Malicious Connection')), Responses, MaxLinksLive, LinksFailed, AverageResponseTime, TotalBytesSent, TotalBytesReceived, Info = iff(MaliciousIpInfo != '', MaliciousIpInfo, ''), Key, ParentKey, TypeKey, MaliciousConnectionsCount | order by TypeKey asc, MaliciousConnectionsCount desc, LinksFailed desc, AverageResponseTime desc, Responses desc, MaxLinksLive desc, Name asc | project-away TypeKey\")",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "0d6a320e-2cef-44fd-ac0b-ad833f8d0c03",
            "version": "KqlParameterItem/1.0",
            "name": "CPI",
            "type": 1,
            "isRequired": false,
            "query": "print(\"let computers = ServiceMapComputer_CL | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | summarize (TimeGenerated, Properties) = arg_max(TimeGenerated, pack_all()) by Computer; let ipComputerMapping = computers | project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s)) | mvexpand Ipv4 to typeof(string); let maliciousIpData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | where MaliciousIp != '' | summarize argmax(TimeGenerated, *) by MaliciousIp | project MaliciousIp = strcat(max_TimeGenerated_Computer, '-', max_TimeGenerated_ProcessName, '-', MaliciousIp), Computer = max_TimeGenerated_Computer, Process = strcat(max_TimeGenerated_Computer, '-', max_TimeGenerated_ProcessName), MaliciousIpInfo = pack('Malicious IP', MaliciousIp, 'Is Active', max_TimeGenerated_IsActive, 'Indicator Threat Type', max_TimeGenerated_IndicatorThreatType, 'Remote Country', max_TimeGenerated_RemoteCountry, 'Longitude', max_TimeGenerated_RemoteLongitude, 'Latitude', max_TimeGenerated_RemoteLatitude, 'Confidence', max_TimeGenerated_Confidence, 'Severity', max_TimeGenerated_Severity, 'First Reported DateTime', max_TimeGenerated_FirstReportedDateTime, 'Last Reported DateTime', max_TimeGenerated_LastReportedDateTime, 'Report Reference Link', max_TimeGenerated_ReportReferenceLink); let totalMaliciousConnectionsCount = maliciousIpData | summarize MaliciousIpInfo = count() | extend Type = 'Overall'; let computerData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by  Name = strcat('🖥️ ', Computer), Type = 'Computer', TypeKey = 1, Key = Computer, ParentKey = '---' | join kind=leftouter (maliciousIpData | summarize MaliciousIpInfo = tostring(count()) by Computer) on $left.Key == $right.Computer | project-away Computer | order by Name asc; let processData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | where ProcessName != '' | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by  Computer, Name = strcat('🎫 ', ProcessName), Type = 'Process', TypeKey = 2, Key = strcat(Computer, '-', ProcessName), ParentKey = Computer | join kind=inner computerData on $left.ParentKey == $right.Key | project-away Name1, Responses1, LinksFailed1, MaxLinksLive1, TotalBytesSent1, TotalBytesReceived1, AverageResponseTime1, Type1, Key1, ParentKey1 | join kind=leftouter (maliciousIpData | summarize MaliciousIpInfo = tostring(count()) by Process) on $left.Key == $right.Process | project-away Process, MaliciousIpInfo | extend MaliciousIpInfo = tostring(MaliciousIpInfo1) | project-away MaliciousIpInfo1\t\t\t\t\t\t\t   | order by Name asc; let remoteIpData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | extend RemoteIp = iff(Direction == 'outbound', DestinationIp, SourceIp) | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by Computer, ProcessName, RemoteIp, Type = 'Remote Computer', TypeKey = 3, Key = strcat(Computer, '-', ProcessName, '-', RemoteIp), ParentKey = strcat(Computer, '-', ProcessName) | join kind=inner processData on $left.ParentKey == $right.Key | project-away Name, Responses1, LinksFailed1, MaxLinksLive1, TotalBytesSent1, TotalBytesReceived1, AverageResponseTime1, Type1, Key1, ParentKey1 | join kind=leftouter maliciousIpData on $left.Key == $right.MaliciousIp | project-away MaliciousIp, Computer, Process, Computer1, Computer2, MaliciousIpInfo | extend MaliciousIpInfo = tostring(MaliciousIpInfo1) | project-away MaliciousIpInfo1 | join kind = leftouter (ipComputerMapping) on $left.RemoteIp == $right.Ipv4 | extend Name = iff(Computer == '', iff(RemoteIp == '127.0.0.1', '🌐 Localhost',  strcat('🌐 External (', RemoteIp, ')')), strcat('🖥️ ', Computer)) | project-away Computer, Ipv4 | order by Name desc; let overalldata = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) | extend Name = '💎 Overall', Type = 'Overall', TypeKey = 0, Key = '--Overall--', ParentKey = '----' | join kind=leftouter totalMaliciousConnectionsCount on Type | extend MaliciousIpInfo = iff(MaliciousIpInfo == '0', '', tostring(MaliciousIpInfo)) | project-away Type1; computerData | union processData | union remoteIpData | union overalldata\t\t\t\t\t\t\t | extend MaliciousConnectionsCount = iff(MaliciousIpInfo == '', 0, iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', tolong(MaliciousIpInfo), 1)) | project Name, Type, MaliciousConnections = iff(MaliciousIpInfo == '', '✅ No Malicious Connections', iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', iff(MaliciousConnectionsCount > 1, strcat('❌ ', MaliciousIpInfo, ' Malicious Connections'), strcat('❌ ', MaliciousIpInfo, ' Malicious Connection')), '❌ Malicious Connection')), Responses, MaxLinksLive, LinksFailed, AverageResponseTime, TotalBytesSent, TotalBytesReceived, Info = iff(MaliciousIpInfo != '', MaliciousIpInfo, ''), Key, ParentKey, TypeKey, MaliciousConnectionsCount | order by TypeKey asc, MaliciousConnectionsCount desc, LinksFailed desc, AverageResponseTime desc, Responses desc, MaxLinksLive desc, Name asc | project-away TypeKey\")",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "e8f2c394-18e8-4d6d-8f5e-8453cb67128c",
            "version": "KqlParameterItem/1.0",
            "name": "CP",
            "type": 1,
            "isRequired": false,
            "query": "print(\"let computers = ServiceMapComputer_CL | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | summarize (TimeGenerated, Properties) = arg_max(TimeGenerated, pack_all()) by Computer; let ipComputerMapping = computers | project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s)) | mvexpand Ipv4 to typeof(string); let maliciousIpData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | where MaliciousIp != '' | summarize argmax(TimeGenerated, *) by MaliciousIp | project MaliciousIp = strcat(max_TimeGenerated_Computer, '-', max_TimeGenerated_ProcessName, '-', MaliciousIp), Computer = max_TimeGenerated_Computer, Process = strcat(max_TimeGenerated_Computer, '-', max_TimeGenerated_ProcessName), MaliciousIpInfo = pack('Malicious IP', MaliciousIp, 'Is Active', max_TimeGenerated_IsActive, 'Indicator Threat Type', max_TimeGenerated_IndicatorThreatType, 'Remote Country', max_TimeGenerated_RemoteCountry, 'Longitude', max_TimeGenerated_RemoteLongitude, 'Latitude', max_TimeGenerated_RemoteLatitude, 'Confidence', max_TimeGenerated_Confidence, 'Severity', max_TimeGenerated_Severity, 'First Reported DateTime', max_TimeGenerated_FirstReportedDateTime, 'Last Reported DateTime', max_TimeGenerated_LastReportedDateTime, 'Report Reference Link', max_TimeGenerated_ReportReferenceLink); let totalMaliciousConnectionsCount = maliciousIpData | summarize MaliciousIpInfo = count() | extend Type = 'Overall'; let computerData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by  Name = strcat('🖥️ ', Computer), Type = 'Computer', TypeKey = 1, Key = Computer, ParentKey = '---' | join kind=leftouter (maliciousIpData | summarize MaliciousIpInfo = tostring(count()) by Computer) on $left.Key == $right.Computer | project-away Computer | order by Name asc; let processData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | where ProcessName != '' | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by  Computer, Name = strcat('🎫 ', ProcessName), Type = 'Process', TypeKey = 2, Key = strcat(Computer, '-', ProcessName), ParentKey = Computer | join kind=inner computerData on $left.ParentKey == $right.Key | project-away Name1, Responses1, LinksFailed1, MaxLinksLive1, TotalBytesSent1, TotalBytesReceived1, AverageResponseTime1, Type1, Key1, ParentKey1 | join kind=leftouter (maliciousIpData | summarize MaliciousIpInfo = tostring(count()) by Process) on $left.Key == $right.Process | project-away Process, MaliciousIpInfo | extend MaliciousIpInfo = tostring(MaliciousIpInfo1) | project-away MaliciousIpInfo1\t\t\t\t\t\t\t   | order by Name asc; let overalldata = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) | extend Name = '💎 Overall', Type = 'Overall', TypeKey = 0, Key = '--Overall--', ParentKey = '----' | join kind=leftouter totalMaliciousConnectionsCount on Type | extend MaliciousIpInfo = iff(MaliciousIpInfo == '0', '', tostring(MaliciousIpInfo)) | project-away Type1; computerData | union processData | union overalldata\t\t\t\t\t\t\t | extend MaliciousConnectionsCount = iff(MaliciousIpInfo == '', 0, iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', tolong(MaliciousIpInfo), 1)) | project Name, Type, MaliciousConnections = iff(MaliciousIpInfo == '', '✅ No Malicious Connections', iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', iff(MaliciousConnectionsCount > 1, strcat('❌ ', MaliciousIpInfo, ' Malicious Connections'), strcat('❌ ', MaliciousIpInfo, ' Malicious Connection')), '❌ Malicious Connection')), Responses, MaxLinksLive, LinksFailed, AverageResponseTime, TotalBytesSent, TotalBytesReceived, Info = iff(MaliciousIpInfo != '', MaliciousIpInfo, ''), Key, ParentKey, TypeKey, MaliciousConnectionsCount | order by TypeKey asc, MaliciousConnectionsCount desc, LinksFailed desc, AverageResponseTime desc, Responses desc, MaxLinksLive desc, Name asc | project-away TypeKey\")",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "a4b0e146-7c89-40bb-ade2-ed2e392e9311",
            "version": "KqlParameterItem/1.0",
            "name": "C",
            "type": 1,
            "isRequired": false,
            "query": "print(\"let computers = ServiceMapComputer_CL | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | summarize (TimeGenerated, Properties) = arg_max(TimeGenerated, pack_all()) by Computer; let ipComputerMapping = computers | project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s)) | mvexpand Ipv4 to typeof(string); let maliciousIpData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | where MaliciousIp != '' | summarize argmax(TimeGenerated, *) by MaliciousIp | project MaliciousIp = strcat(max_TimeGenerated_Computer, '-', max_TimeGenerated_ProcessName, '-', MaliciousIp), Computer = max_TimeGenerated_Computer, Process = strcat(max_TimeGenerated_Computer, '-', max_TimeGenerated_ProcessName), MaliciousIpInfo = pack('Malicious IP', MaliciousIp, 'Is Active', max_TimeGenerated_IsActive, 'Indicator Threat Type', max_TimeGenerated_IndicatorThreatType, 'Remote Country', max_TimeGenerated_RemoteCountry, 'Longitude', max_TimeGenerated_RemoteLongitude, 'Latitude', max_TimeGenerated_RemoteLatitude, 'Confidence', max_TimeGenerated_Confidence, 'Severity', max_TimeGenerated_Severity, 'First Reported DateTime', max_TimeGenerated_FirstReportedDateTime, 'Last Reported DateTime', max_TimeGenerated_LastReportedDateTime, 'Report Reference Link', max_TimeGenerated_ReportReferenceLink); let totalMaliciousConnectionsCount = maliciousIpData | summarize MaliciousIpInfo = count() | extend Type = 'Overall'; let computerData = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) by  Name = strcat('🖥️ ', Computer), Type = 'Computer', TypeKey = 1, Key = Computer, ParentKey = '---' | join kind=leftouter (maliciousIpData | summarize MaliciousIpInfo = tostring(count()) by Computer) on $left.Key == $right.Computer | project-away Computer | order by Name asc; let overalldata = VMConnection | where '{GridRefresh}' == 'run' | where TimeGenerated {TimeRange} | where Direction == '{Direction}' {ComputerFilter} | summarize Responses = sum(Responses), LinksFailed = sum(LinksFailed), MaxLinksLive = max(LinksLive), TotalBytesSent = sum(BytesSent), TotalBytesReceived = sum(BytesReceived), AverageResponseTime = 1.0 *  sum(ResponseTimeSum) / sum(Responses) | extend Name = '💎 Overall', Type = 'Overall', TypeKey = 0, Key = '--Overall--', ParentKey = '----' | join kind=leftouter totalMaliciousConnectionsCount on Type | extend MaliciousIpInfo = iff(MaliciousIpInfo == '0', '', tostring(MaliciousIpInfo)) | project-away Type1; computerData | union overalldata\t\t\t\t\t\t\t | extend MaliciousConnectionsCount = iff(MaliciousIpInfo == '', 0, iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', tolong(MaliciousIpInfo), 1)) | project Name, Type, MaliciousConnections = iff(MaliciousIpInfo == '', '✅ No Malicious Connections', iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', iff(MaliciousConnectionsCount > 1, strcat('❌ ', MaliciousIpInfo, ' Malicious Connections'), strcat('❌ ', MaliciousIpInfo, ' Malicious Connection')), '❌ Malicious Connection')), Responses, MaxLinksLive, LinksFailed, AverageResponseTime, TotalBytesSent, TotalBytesReceived, Info = iff(MaliciousIpInfo != '', MaliciousIpInfo, ''), Key, ParentKey, TypeKey, MaliciousConnectionsCount | order by TypeKey asc, MaliciousConnectionsCount desc, LinksFailed desc, AverageResponseTime desc, Responses desc, MaxLinksLive desc, Name asc | project-away TypeKey\")",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "378a1139-93e3-48ee-871b-1eca9bf969d7",
            "version": "KqlParameterItem/1.0",
            "name": "Hierarchy",
            "type": 2,
            "isRequired": true,
            "query": "datatable (value:string, Display:string)\r\n    [\"0\", \"Computer -> Process -> IP -> Port\",\r\n     \"1\", \"Computer -> Process -> IP\",\r\n     \"2\", \"Computer -> Process\",\r\n     \"3\", \"Computer\"]",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "value": "2",
            "isHiddenWhenLocked": false,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          },
          {
            "id": "a08757da-e72b-474d-a1d2-65fb7020cc14",
            "version": "KqlParameterItem/1.0",
            "name": "FinalQuery",
            "type": 1,
            "isRequired": false,
            "query": "print(\r\niff({Hierarchy} == 0, \"{CPIP}\", \r\niff({Hierarchy} == 1, \"{CPI}\",\r\niff({Hierarchy} == 2, \"{CP}\",\r\niff({Hierarchy} == 3, \"{C}\", \"{C}\")))));",
            "crossComponentResources": [
              "{Workspaces}"
            ],
            "isHiddenWhenLocked": true,
            "timeContextFromParameter": null,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "conditionalVisibility": null
    },
    {
      "type": 1,
      "content": {
        "json": "### {Direction:label} Connections Stats\n\nSelected Computers: (*{Computers:label}*)\n\nComputers are selected based on the filter: Computer Name contains *'{ComputerNameContains}'*\n\nIf there are numerous Computers reporting to this workspace, the below grid might take longer time to run the query. You might want to filter the computers before refreshing the grid. \n\nYou can do this by selecting '*Pause*' in the dropdown '**GridRefresh**'. Once you have your computer selections, you can change this back to '*Run*' to execute the query.\n\n"
      },
      "conditionalVisibility": null
    },
    {
      "type": 3,
      "content": {
        "version": "KqlItem/1.0",
        "query": "{FinalQuery:value}",
        "showQuery": false,
        "size": 2,
        "aggregation": 0,
        "showAnnotations": false,
        "showAnalytics": false,
        "noDataMessage": "No Machines reporting to this workspace.",
        "timeContextFromParameter": null,
        "resourceType": "microsoft.operationalinsights/workspaces",
        "crossComponentResources": [
          "{Workspaces}"
        ],
        "visualization": "table",
        "gridSettings": {
          "formatters": [
            {
              "columnMatch": "Responses",
              "formatter": 4,
              "formatOptions": {
                "palette": "yellow"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "MaxLinksLive",
              "formatter": 4,
              "formatOptions": {
                "palette": "green"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "LinksFailed",
              "formatter": 4,
              "formatOptions": {
                "palette": "red"
              },
              "numberFormat": {
                "unit": 17,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "AverageResponseTime",
              "formatter": 4,
              "formatOptions": {
                "palette": "purple"
              },
              "numberFormat": {
                "unit": 23,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalBytesSent",
              "formatter": 4,
              "formatOptions": {
                "palette": "blueDark"
              },
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "TotalBytesReceived",
              "formatter": 4,
              "formatOptions": {
                "palette": "lightBlue"
              },
              "numberFormat": {
                "unit": 2,
                "options": {
                  "style": "decimal"
                }
              }
            },
            {
              "columnMatch": "Info",
              "formatter": 7,
              "formatOptions": {
                "linkTarget": "CellDetails",
                "linkLabel": "ℹ️ Info"
              }
            },
            {
              "columnMatch": "Key",
              "formatter": 5,
              "formatOptions": {}
            },
            {
              "columnMatch": "ParentKey",
              "formatter": 5,
              "formatOptions": {}
            },
            {
              "columnMatch": "MaliciousConnectionsCount",
              "formatter": 5,
              "formatOptions": {}
            },
            {
              "columnMatch": "Computer",
              "formatter": 5,
              "formatOptions": {}
            },
            {
              "columnMatch": "DestinationPort",
              "formatter": 1,
              "formatOptions": {},
              "numberFormat": {
                "unit": 0,
                "options": {
                  "style": "decimal"
                }
              }
            }
          ],
          "rowLimit": 10000,
          "hierarchySettings": {
            "idColumn": "Key",
            "parentColumn": "ParentKey",
            "treeType": 0,
            "expanderColumn": "Name",
            "expandTopLevel": false
          }
        },
        "tileSettings": {
          "showBorder": false,
          "titleContent": {
            "columnMatch": "Computer",
            "formatter": 1
          },
          "leftContent": {
            "columnMatch": "KPIValue",
            "formatter": 12,
            "formatOptions": {
              "palette": "auto"
            },
            "numberFormat": {
              "unit": 17,
              "options": {
                "maximumSignificantDigits": 3,
                "maximumFractionDigits": 2
              }
            }
          }
        }
      },
      "conditionalVisibility": null
    }
  ],
  "defaultResourceIds": [
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}